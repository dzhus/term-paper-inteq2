%% $\sum_m{f(x_m)g(x_m)}$
function R = discrete_product(f, g, points)
  R = 0;
  for i = 1:length(points)
    R += f(points(i)) * g(points(i));
  endfor
endfunction

function c = Cheb_coeffs(f, a, b, n)
  c = [];
  for i = 1:n
    c(i) = discrete_product(@(x) Cheb(a, b, i, x), f, Cheb_roots(a, b, n)) / Cheb_norm(i, n);
  endfor
endfunction

%% Value(s) of function $f$ approximated by Chebyshev polynomials over
%% range $[a;b]$ to $n$ degree. $x$ is either a single value or vector.
function R = Cheb_approx(f, x, a, b, n)
  c = Cheb_coeffs(f, a, b, n);
  if !isvector(x)
    x = [x]
  endif
  R = zeros(1, length(x));
  for m = 1:length(x)
    for i = 1:n
      R(m) += c(i) * Cheb(a, b, i, x(m));
    endfor
  endfor
endfunction

%% Absolute error for satisfying linear interpolation condition of
%% Chebyshev approximation for $f$
function c = interpolation_error(f, a, b, n)
  pts = Cheb_roots(a, b, n);
  P = @(x) Cheb(a, b, n, x);
  t = discrete_product(P, f, pts);
  s = discrete_product(P, @(x) Cheb_approx(f, x, a, b, n), pts);
  c = abs(t-s);
endfunction

%!assert(0, interpolation_error(@sin, -1, 1, 5), 1e-10)
%!assert(0, interpolation_error(@(x) x**3+sin(5*x)+log(x), 1, 5, 10), 1e-10)
%!assert(0, interpolation_error(@sign, -10, 10, 10), 1e-10)

test approx.oct
